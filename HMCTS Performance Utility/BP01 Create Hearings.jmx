<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="3 party Data Set Config" enabled="true">
          <stringProp name="filename">C:\JMeter Scripts\Test\BP01_3.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">pHearingId,pHearingDate,pHearingTime,pHearingDuration,pJudgeId,pRepresentativeId_1,pRepresentativeId_2,pRepresentativeId_3</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="cBEARER" elementType="Argument">
              <stringProp name="Argument.name">cBEARER</stringProp>
              <stringProp name="Argument.value">NOT-FOUND</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cAPBEARER" elementType="Argument">
              <stringProp name="Argument.name">cAPBEARER</stringProp>
              <stringProp name="Argument.value">NOT-FOUND</stringProp>
              <stringProp name="Argument.desc">Keeps the first Bearer Token</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cUserId" elementType="Argument">
              <stringProp name="Argument.name">cUserId</stringProp>
              <stringProp name="Argument.value">NOT-FOUND</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hClientId" elementType="Argument">
              <stringProp name="Argument.name">hClientId</stringProp>
              <stringProp name="Argument.value">00000000-0000-0000-0000-000000000000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hClientSecret" elementType="Argument">
              <stringProp name="Argument.name">hClientSecret</stringProp>
              <stringProp name="Argument.value">00000000-0000-0000-0000-000000000000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hResource" elementType="Argument">
              <stringProp name="Argument.name">hResource</stringProp>
              <stringProp name="Argument.value">ApiUrl</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pHearingDate" elementType="Argument">
              <stringProp name="Argument.name">pHearingDate</stringProp>
              <stringProp name="Argument.value">2020-04-01</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pHearingTime" elementType="Argument">
              <stringProp name="Argument.name">pHearingTime</stringProp>
              <stringProp name="Argument.value">22:07</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pHearingDuration" elementType="Argument">
              <stringProp name="Argument.name">pHearingDuration</stringProp>
              <stringProp name="Argument.value">45</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pHearingId" elementType="Argument">
              <stringProp name="Argument.name">pHearingId</stringProp>
              <stringProp name="Argument.value">30004</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pJudgeId" elementType="Argument">
              <stringProp name="Argument.name">pJudgeId</stringProp>
              <stringProp name="Argument.value">01</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pRepresentativeId_1" elementType="Argument">
              <stringProp name="Argument.name">pRepresentativeId_1</stringProp>
              <stringProp name="Argument.value">_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pRepresentativeId_2" elementType="Argument">
              <stringProp name="Argument.name">pRepresentativeId_2</stringProp>
              <stringProp name="Argument.value">_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="uAppAPI" elementType="Argument">
              <stringProp name="Argument.name">uAppAPI</stringProp>
              <stringProp name="Argument.value">ApiUrl</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="uTokenAPI" elementType="Argument">
              <stringProp name="Argument.name">uTokenAPI</stringProp>
              <stringProp name="Argument.value">https://login.microsoftonline.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="uTennantId" elementType="Argument">
              <stringProp name="Argument.name">uTennantId</stringProp>
              <stringProp name="Argument.value">00000000-0000-0000-0000-000000000000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pPhone" elementType="Argument">
              <stringProp name="Argument.name">pPhone</stringProp>
              <stringProp name="Argument.value">01932 844344</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pHouseNumber" elementType="Argument">
              <stringProp name="Argument.name">pHouseNumber</stringProp>
              <stringProp name="Argument.value">123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pStreet" elementType="Argument">
              <stringProp name="Argument.name">pStreet</stringProp>
              <stringProp name="Argument.value">London Road</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pPostCode" elementType="Argument">
              <stringProp name="Argument.name">pPostCode</stringProp>
              <stringProp name="Argument.value">SQ1 1WS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pCity" elementType="Argument">
              <stringProp name="Argument.name">pCity</stringProp>
              <stringProp name="Argument.value">London</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pCounty" elementType="Argument">
              <stringProp name="Argument.name">pCounty</stringProp>
              <stringProp name="Argument.value">London</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pHearingVenu" elementType="Argument">
              <stringProp name="Argument.name">pHearingVenu</stringProp>
              <stringProp name="Argument.value">Birmingham Civil and Family Justice Centre</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get  BEARER Token for App" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
                <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${hClientId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${hClientSecret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
                <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="resource" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${hResource}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">resource</stringProp>
                <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${uTokenAPI}/${uTennantId}/oauth2/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname=" cBEARER Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">cBEARER</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">1</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Hearing" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;scheduled_date_time&quot;:&quot;${pHearingDate}T${pHearingTime}:00.000Z&quot;,&#xd;
	&quot;scheduled_duration&quot;:&quot;${pHearingDuration}&quot;,&#xd;
	&quot;hearing_venue_name&quot;:&quot;${pHearingVenu}&quot;,&#xd;
	&quot;case_type_name&quot;:&quot;Generic&quot;,&#xd;
	&quot;hearing_type_name&quot;:&quot;Hearing&quot;,&#xd;
	&quot;cases&quot;:[{&#xd;
		&quot;number&quot;:&quot;Performance Test API- ${pHearingId}&quot;,&#xd;
		&quot;name&quot;:&quot;Solicitor &amp; Claimant - Solicitor &amp; Defendant (${pHearingId})&quot;,&#xd;
		&quot;is_lead_case&quot;:false&#xd;
	}],&#xd;
	&quot;participants&quot;:[{&#xd;
		&quot;title&quot;:&quot;Judge&quot;,&#xd;
		&quot;first_name&quot;:&quot;TP&quot;,&#xd;
		&quot;middle_names&quot;:&quot;&quot;,&#xd;
		&quot;last_name&quot;:&quot;Clerk${pJudgeId}&quot;,&#xd;
		&quot;contact_email&quot;:&quot;TPClerk${pJudgeId}@hearings.reform.hmcts.net&quot;,&#xd;
		&quot;telephone_number&quot;:&quot;&quot;,&#xd;
		&quot;username&quot;:&quot;TPClerk${pJudgeId}@hearings.reform.hmcts.net&quot;,&#xd;
		&quot;display_name&quot;:&quot;TP Clerk${pJudgeId}&quot;,&#xd;
		&quot;case_role_name&quot;:&quot;Judge&quot;,&#xd;
		&quot;hearing_role_name&quot;:&quot;Judge&quot;,&#xd;
		&quot;house_number&quot;:null,&#xd;
		&quot;street&quot;:null,&#xd;
		&quot;postcode&quot;:null,&#xd;
		&quot;city&quot;:null,&#xd;
		&quot;county&quot;:null&#xd;
		}&#xd;
	],&#xd;
	&quot;hearing_room_name&quot;:&quot;Room ${pHearingId}&quot;,&#xd;
	&quot;other_information&quot;:&quot;Performance Test Hearing ${pHearingId}&quot;,&#xd;
	&quot;created_by&quot;: &quot;TPVIDEOHEARINGSOFFICER0080@hearings.reform.hmcts.net&quot;,&#xd;
	&quot;questionnaire_not_required&quot;:true,&#xd;
	&quot;audio_recording_required&quot;: true&#xd;
	&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${uAppAPI}/hearings</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Media-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cBEARER}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cHEARINGNUMBER Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">cHEARINGNUMBER</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm Hearing" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    	&quot;updated_by&quot;: &quot;004a4a9f-a455-4e0c-861b-29de373892c4&quot;,&#xd;
    	&quot;status&quot;: &quot;Created&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${uAppAPI}/hearings/${cHEARINGNUMBER}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="Media-Type" elementType="Header">
                <stringProp name="Header.name">Media-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cBEARER}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
