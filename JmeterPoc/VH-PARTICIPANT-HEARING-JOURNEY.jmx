<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="VH-PARTICIPANT-HEARING-JOURNEY" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.17. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Users Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${dataDir}/BP07_ParticipantAttendHearing_1.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">LoginId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_4" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_4</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserLoginId" elementType="Argument">
            <stringProp name="Argument.name">UserLoginId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPassword" elementType="Argument">
            <stringProp name="Argument.name">UserPassword</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SleepTime" elementType="Argument">
            <stringProp name="Argument.name">SleepTime</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="httpPrefix" elementType="Argument">
            <stringProp name="Argument.name">httpPrefix</stringProp>
            <stringProp name="Argument.value">https://</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientConferencesUrl" elementType="Argument">
            <stringProp name="Argument.name">clientConferencesUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hearingTime" elementType="Argument">
            <stringProp name="Argument.name">hearingTime</stringProp>
            <stringProp name="Argument.value">2160</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connectionTime" elementType="Argument">
            <stringProp name="Argument.name">connectionTime</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tokenDir" elementType="Argument">
            <stringProp name="Argument.name">tokenDir</stringProp>
            <stringProp name="Argument.value">C:/JMeter Scripts/JmeterPerfTest/tokens</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loginUrl" elementType="Argument">
            <stringProp name="Argument.name">loginUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoApiClientId" elementType="Argument">
            <stringProp name="Argument.name">videoApiClientId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoApiClientSecret" elementType="Argument">
            <stringProp name="Argument.name">videoApiClientSecret</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoApiUrl" elementType="Argument">
            <stringProp name="Argument.name">videoApiUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoWebClientId" elementType="Argument">
            <stringProp name="Argument.name">videoWebClientId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoWebClientSecret" elementType="Argument">
            <stringProp name="Argument.name">videoWebClientSecret</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataDir" elementType="Argument">
            <stringProp name="Argument.name">dataDir</stringProp>
            <stringProp name="Argument.value">C:/JMeter Scripts/JmeterPerfTest/data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loginBaseUrl" elementType="Argument">
            <stringProp name="Argument.name">loginBaseUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logDir" elementType="Argument">
            <stringProp name="Argument.name">logDir</stringProp>
            <stringProp name="Argument.value">C:/JMeter Scripts/JmeterPerfTest/logs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2000</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s1-AuthToken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${videoWebClientId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${videoWebClientSecret}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
                <elementProp name="resource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${videoWebClientId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">resource</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${LoginId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${UserPassword}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${loginBaseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">${PortNo}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${loginUrl}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">90000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://login.microsoftonline.com</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.access_token</stringProp>
              <stringProp name="EXPECTED_VALUE">^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s2-Individuals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/individuals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|EYFji.ACAa7</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ConferenceId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[:1].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s3-Conferences" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|ObbY+.X7n3e</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">participantId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.username==&apos;${__javaScript(&apos;${LoginId}&apos;.toLowerCase())}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestParticipantId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participant_uri</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestParticipantUri</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JudgeName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.role==&apos;Judge&apos;)].display_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestJudgeName</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s4-Status" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;event_type&quot;:&quot;ParticipantJoining&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}/participantstatus</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|ObbY+.zgjFx</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json-patch+json</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s5-Selftesttoken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">participants/${participantId}/selftesttoken</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|ObbY+.LzmeX</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SipToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SipTokenExp</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.expires_on</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestExpiry</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s6-Request_token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;display_name&quot;:&quot;${participantId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/testcall2;${__base64Encode(${SipTokenExp};${participantId};${SipToken},)}/request_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.participant_uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s7-Conference_status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/testcall2;${__base64Encode(${SipTokenExp};${participantId};${SipToken},)}/conference_status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Participant-s8-ST Event" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">${BASE_URL_2} ${connectionTime} ${SleepTime} </stringProp>
            <stringProp name="script">import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import java.net.URI;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonValue; 
import java.io.FileWriter;  
import java.io.IOException; 
import org.apache.jmeter.services.FileServer;
import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;
import java.sql.Timestamp;
import java.time.Instant;
 

public class SimpleEventHandler implements EventHandler {

	public List&lt;String&gt; respList = new ArrayList&lt;String&gt;();
	String fileName =  &quot;${logDir}/${JudgeName}/${LoginId}/${participantId}-log.txt&quot;;
	String newLine = &quot;\r\n&quot;;	

	public void onOpen() throws Exception{
		FileWriter myWriter =  new FileWriter(new File(fileName), true);
		myWriter.write(&quot;ST=The connection has been opened&quot; + newLine);
		myWriter.close();	
	}

	public void onClosed() throws Exception{	
		FileWriter myWriter =  new FileWriter(new File(fileName), true);
		myWriter.write(&quot;ST=The connection has been closed&quot; + newLine);
		myWriter.close();	
	}

	public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
		FileWriter myWriter =  new FileWriter(new File(fileName), true);
		myWriter.write(&quot;ST=&quot;+messageEvent.getData() + newLine);
		myWriter.close();		
	}

	public void onComment(String comment) throws Exception{
		FileWriter myWriter =  new FileWriter(new File(fileName), true);
		myWriter.write(&quot;ST=Comment= &quot;+comment + newLine);
		myWriter.close();
	}

	public void onError(Throwable t){
		FileWriter myWriter =  new FileWriter(new File(fileName), true);
		myWriter.write(&quot;ST=Error &quot;+t + newLine);
		myWriter.close();
	}
}

	String newLine = &quot;\r\n&quot;;
	String fileName = &quot;${logDir}/${JudgeName}/${LoginId}&quot;;
	File logFile = new File(fileName);
	logFile.mkdirs();
	fileName += &quot;/${participantId}-log.txt&quot;;
	logFile = new File(fileName);
	logFile.createNewFile();
	FileWriter logWriter = new FileWriter(logFile, true);

	EventHandler eH = new SimpleEventHandler();

	String responseList=&quot;Test Empty&quot;;
	String sipUrl = &quot;${httpPrefix}&quot;+args[0]+&quot;/${clientConferencesUrl}/testcall2;${__base64Encode(${SipTokenExp};${participantId};${SipToken},)}/&quot;;	
	
	EventSource.Builder builder = new EventSource.Builder(eH, URI.create(sipUrl+&quot;events?token=&apos;&quot;+URLEncoder.encode(&quot;${SelfTestToken}&quot;, &quot;UTF-8&quot;)+&quot;&apos;&quot;));

	EventSource eventSource = builder.build();
	System.out.println(&quot;Started to connect&quot;);
	eventSource.start();
//	TimeUnit.SECONDS.sleep(Integer.parseInt(args[2]));
	sipUrl += &quot;participants/${ParticipantUuid}/calls&quot;;

	def post = new URL(sipUrl).openConnection();
	File inputFile = new File(&quot;${dataDir}/Participant-WR-WebRtc.json&quot;);
	post.setRequestMethod(&quot;POST&quot;)
	post.setDoOutput(true)
	post.setRequestProperty(&quot;token&quot;, &quot;${SelfTestToken}&quot;)
	post.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)
		post.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
	post.getOutputStream().write(inputFile.text.getBytes(&quot;UTF-8&quot;));
	def postRC = post.getResponseCode();
	
	if(postRC.equals(200)) {
		def jsonString = post.getInputStream().getText()
	    def slurper = new JsonSlurper();
	    def callUuid  = slurper.parseText(jsonString).result.call_uuid;
		logWriter.write(&quot;Calls=&quot;+callUuid + newLine)
	     vars.put(&quot;CallUuid&quot;,callUuid);

//	     def ack = new URL(sipUrl+&quot;/&quot;+callUuid+&quot;/ack&quot;).openConnection();
//		ack.setRequestMethod(&quot;POST&quot;)	
//		ack.setRequestProperty(&quot;token&quot;, &quot;${SelfTestToken}&quot;)
//		ack.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
//		def ackResponse = ack.getResponseCode();
//		println(&quot;Ack=&quot;+ackResponse);
	}
	else {
		logWriter.write(&quot;Failed to POST Calls&quot;+ newLine)
	} 

	
	TimeUnit.SECONDS.sleep(Integer.parseInt(args[2]));
	eventSource.close();
	logWriter.write(&quot;End connection!&quot;+ newLine);
	logWriter.close();

//	for(String respRecord:eH.respList){
//		System.out.println(respRecord);
//		JsonReader jsonReader = Json.createReader(new StringReader(messageEvent.getData()));
//		JsonObject jsonObject = jsonReader.readObject();
//		String token = jsonObject.getString(&quot;token&quot;);
//		if(token != null &amp;&amp; !token.trim().isEmpty()) { 
//		vars.put(&quot;eventToken&quot;,token);
//		} 
//	}
//
//	SampleResult.setResponseData(responseList,&quot;866&quot;);
//	vars.put(&quot;eventToken&quot;,responseList);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s9-Selftestfailureevents" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;self_test_failure_reason&quot;:&quot;IncompleteTest&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}/selftestfailureevents</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|ObbY+.O+fKN</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json-patch+json</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s10-Disconnect" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/testcall2;${__base64Encode(${SipTokenExp};${participantId};${SipToken},)}/participants/${ParticipantUuid}/calls/null/disconnect</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s11-Release_Token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/testcall2;${__base64Encode(${SipTokenExp};${participantId};${SipToken},)}/release_token?token=${SelfTestToken}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s12-Conferences" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|ObbY+.K7g6m</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participant_uri</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestExpiry</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">participantId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.username==&apos;${__javaScript(&apos;${LoginId}&apos;.toLowerCase())}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestExpiry</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantDisplayName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.username==&apos;${__javaScript(&apos;${LoginId}&apos;.toLowerCase())}&apos;)].tiled_display_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestExpiry</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s13-Jwtoken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">participants/${participantId}/jwtoken</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|ObbY+.zxi48</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s14-InstantMessages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}/instantmessages/participant/${__urlencode(${LoginId})}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|ObbY+.Ku8Xf</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s15-Request_token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;display_name&quot;:&quot;${ParticipantDisplayName}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/request_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="pin" elementType="Header">
                  <stringProp name="Header.name">pin</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.conference_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestExpiry</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.participant_uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s16-Conference_status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/conference_status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Participant-s17-WR Event" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">${BASE_URL_2} ${connectionTime} ${SleepTime} </stringProp>
            <stringProp name="script">import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import java.net.URI;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonValue; 
import java.io.FileWriter;  
import java.io.IOException; 
import org.apache.jmeter.services.FileServer;
import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;
 

public class SimpleEventHandler implements EventHandler {

	public List&lt;String&gt; respList = new ArrayList&lt;String&gt;();
	File logFile =  new File(&quot;${logDir}/${JudgeName}/${LoginId}/${participantId}-log.txt&quot;);
	String newLine = &quot;\r\n&quot;;	

	public void onOpen() throws Exception{
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;WR=The connection has been opened&quot; + newLine);
		myWriter.close();	
	}

	public void onClosed() throws Exception{
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;WR=The connection has been closed&quot; + newLine);
		myWriter.close();	
	}

	public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
		JsonReader jsonReader = Json.createReader(new StringReader(messageEvent.getData()));
		JsonObject jsonObject = jsonReader.readObject();
		jsonReader.close(); 
		String token = jsonObject.getString(&quot;token&quot;);
		if(token != null &amp;&amp; !token.trim().isEmpty()) { 
		String tokenFileName = &quot;${tokenDir}/${JudgeName}/${LoginId}&quot;;
		File tokenFile = new File(tokenFileName);
		tokenFile.mkdirs();
		tokenFileName += &quot;/${participantId}-token.csv&quot;;
		tokenFile = new File(tokenFileName);
		tokenFile.createNewFile();
		FileWriter myWriter = new FileWriter(tokenFile, true);
	      myWriter.write(messageEvent.getData());
	      myWriter.close();
		myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;WR=&quot;+messageEvent.getData() + newLine);
		myWriter.close();
		
		}
	}

	public void onComment(String comment) throws Exception{
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;WR=Comment= &quot;+comment + newLine);
		myWriter.close();
	}

	public void onError(Throwable t){
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;WR=Error= &quot;+t + newLine);
		myWriter.close();
	}
}
	String newLine = &quot;\r\n&quot;;
	File logFile =  new File(&quot;${logDir}/${JudgeName}/${LoginId}/${participantId}-log.txt&quot;);
	FileWriter logWriter = new FileWriter(logFile, true);

	EventHandler eH = new SimpleEventHandler();

	String responseList=&quot;Test Empty&quot;;
	String sipUrl = &quot;${httpPrefix}&quot;+args[0]+&quot;/${clientConferencesUrl}/${ParticipantUri}/&quot;;	
	
	EventSource.Builder builder = new EventSource.Builder(eH, URI.create(sipUrl+&quot;events?token=&apos;&quot;+URLEncoder.encode(&quot;${SelfTestToken}&quot;, &quot;UTF-8&quot;)+&quot;&apos;&quot;));

	EventSource eventSource = builder.build();
	logWriter.write(&quot;WR Started to connect&quot; +  newLine);
	eventSource.start();
//	TimeUnit.SECONDS.sleep(Integer.parseInt(args[2]));
	sipUrl += &quot;participants/${ParticipantUuid}/calls&quot;;

	def post = new URL(sipUrl).openConnection();
	File inputFile = new File(&quot;${dataDir}/Participant-WR-WebRtc.json&quot;)
	post.setRequestMethod(&quot;POST&quot;)
	post.setDoOutput(true)
	post.setRequestProperty(&quot;token&quot;, &quot;${SelfTestToken}&quot;)
	post.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)
		post.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
	post.getOutputStream().write(inputFile.text.getBytes(&quot;UTF-8&quot;));
	def postRC = post.getResponseCode();
	
	if(postRC.equals(200)) {
		def jsonString = post.getInputStream().getText()
	    def slurper = new JsonSlurper();
	    def callUuid  = slurper.parseText(jsonString).result.call_uuid;
		logWriter.write(&quot;WR Calls=&quot;+callUuid+  newLine)
	     vars.put(&quot;CallUuid&quot;,callUuid);

	     def ack = new URL(sipUrl+&quot;/&quot;+callUuid+&quot;/ack&quot;).openConnection();
		ack.setRequestMethod(&quot;POST&quot;)	
		ack.setRequestProperty(&quot;token&quot;, &quot;${SelfTestToken}&quot;)
		ack.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
		def ackResponse = ack.getResponseCode();
		logWriter.write(&quot;WR=Ack=&quot;+ackResponse+  newLine);
	}
	else {
		logWriter.write(&quot;WR Failed to POST Calls&quot;+  newLine)
	} 

	
	TimeUnit.SECONDS.sleep(Integer.parseInt(args[2]));
	eventSource.close();
	logWriter.close();
//	System.out.println(&quot;End connection!&quot;);

//	for(String respRecord:eH.respList){
//		System.out.println(respRecord);
//		JsonReader jsonReader = Json.createReader(new StringReader(messageEvent.getData()));
//		JsonObject jsonObject = jsonReader.readObject();
//		String token = jsonObject.getString(&quot;token&quot;);
//		if(token != null &amp;&amp; !token.trim().isEmpty()) { 
//		vars.put(&quot;eventToken&quot;,token);
//		} 
//	}
//
	SampleResult.setResponseData(responseList,&quot;866&quot;);
//	vars.put(&quot;eventToken&quot;,responseList);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s18-heartbeat-1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;unique_id&quot;: &quot;${__UUID()}&quot;,&#xd;
	&quot;sequence_id&quot;: 0,&#xd;
	&quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
	&quot;elapsed_time&quot;: 20004,&#xd;
	&quot;hearing_id&quot;: &quot;${ConferenceId}&quot;,&#xd;
	&quot;participant_id&quot;: &quot;${participantId}&quot;,&#xd;
	&quot;session_id&quot;: &quot;khg36nosdi4Ky144&quot;,&#xd;
	&quot;media_statistics&quot;: {&#xd;
		&quot;outgoing&quot;: {&#xd;
			&quot;audio&quot;: {&#xd;
				&quot;packets-sent&quot;: 331,&#xd;
				&quot;bitrate&quot;: &quot;14kbps&quot;,&#xd;
				&quot;codec&quot;: &quot;opus&quot;,&#xd;
				&quot;packets-lost&quot;: 0,&#xd;
				&quot;percentage-lost&quot;: &quot;0.0%&quot;,&#xd;
				&quot;percentage-lost-recent&quot;: &quot;0.0%&quot;&#xd;
			},&#xd;
			&quot;video&quot;: {&#xd;
				&quot;packets-sent&quot;: 76,&#xd;
				&quot;bitrate&quot;: &quot;13kbps&quot;,&#xd;
				&quot;codec&quot;: &quot;VP8&quot;,&#xd;
				&quot;resolution&quot;: &quot;640x360&quot;,&#xd;
				&quot;packets-lost&quot;: 0,&#xd;
				&quot;percentage-lost&quot;: &quot;0.0%&quot;,&#xd;
				&quot;percentage-lost-recent&quot;: &quot;0.0%&quot;&#xd;
			}&#xd;
		},&#xd;
		&quot;incoming&quot;: {&#xd;
			&quot;audio&quot;: {&#xd;
				&quot;packets-received&quot;: 331,&#xd;
				&quot;packets-lost&quot;: 0,&#xd;
				&quot;percentage-lost&quot;: &quot;0.0%&quot;,&#xd;
				&quot;bitrate&quot;: &quot;55kbps&quot;,&#xd;
				&quot;percentage-lost-recent&quot;: &quot;0.0%&quot;,&#xd;
				&quot;codec&quot;: &quot;opus&quot;&#xd;
			},&#xd;
			&quot;video&quot;: {&#xd;
				&quot;packets-received&quot;: 246,&#xd;
				&quot;packets-lost&quot;: 0,&#xd;
				&quot;percentage-lost&quot;: &quot;0.0%&quot;,&#xd;
				&quot;bitrate&quot;: &quot;120kbps&quot;,&#xd;
				&quot;percentage-lost-recent&quot;: &quot;0.0%&quot;,&#xd;
				&quot;codec&quot;: &quot;VP8&quot;,&#xd;
				&quot;resolution&quot;: &quot;1024x576&quot;&#xd;
			}&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">virtual-court/api/v1/hearing/${ConferenceId}/heartbeat</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JwtToken}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s19-Refresh_token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/refresh_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s20-Disconnect" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/participants/${ParticipantUuid}/calls/${CallUuid}/disconnect</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s21-ReleaseToken" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;reason&quot;:&quot;Call transferred&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/release_token?token=${SelfTestToken}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s22-Read Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">file</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${tokenDir}/${JudgeName}/${LoginId}/${participantId}-token.csv</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;eventToken&quot;, prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.alias</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s23-Request_token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;display_name&quot;:&quot;${ParticipantDisplayName}&quot;,&quot;token&quot;:&quot;${SelfTestToken}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${__strReplace(${ParticipantUri},WAITING,HEARING,)}/request_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="pin" elementType="Header">
                  <stringProp name="Header.name">pin</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.conference_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestExpiry</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.participant_uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s24-Conference_Status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/conference_status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Participant-s25-HR Event" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">${BASE_URL_2} ${connectionTime} ${hearingTime}</stringProp>
            <stringProp name="script">import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import java.net.URI;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonValue;
import org.apache.jmeter.services.FileServer;
import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;
import java.sql.Timestamp;
import java.time.Instant;

public class SimpleEventHandler implements EventHandler {

	public List&lt;String&gt; respList = new ArrayList&lt;String&gt;();
	File logFile =  new File(&quot;${logDir}/${JudgeName}/${LoginId}/${participantId}-log.txt&quot;);
	String newLine = &quot;\r\n&quot;;

	public void onOpen() throws Exception{
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;HR=The connection has been opened&quot; + newLine);
		myWriter.close();
	}

	public void onClosed() throws Exception{
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;HR=The connection has been closed&quot; + newLine);
		myWriter.close();	
	}

	public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;HR=&quot;+messageEvent.getData() + newLine);
		myWriter.close();	
	}

	public void onComment(String comment) throws Exception{
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;HR=Comment= &quot;+comment + newLine);
		myWriter.close();
	}

	public void onError(Throwable t){
		FileWriter myWriter =  new FileWriter(logFile, true);
		myWriter.write(&quot;HR=Error &quot;+t + newLine);
		myWriter.close();
	}
}
	String newLine = &quot;\r\n&quot;;
	File logFile =  new File(&quot;${logDir}/${JudgeName}/${LoginId}/${participantId}-log.txt&quot;);
	FileWriter logWriter = new FileWriter(logFile, true);

	EventHandler eH = new SimpleEventHandler();
	String responseList=&quot;Test Empty&quot;;
	String sipUrl = &quot;${httpPrefix}&quot;+args[0]+&quot;/${clientConferencesUrl}/${ParticipantUri}/&quot;;
	String sipTokenUrl = sipUrl+&quot;events?token=&apos;&quot;+URLEncoder.encode(vars.get(&quot;SelfTestToken&quot;), &quot;UTF-8&quot;)+&quot;&apos;&quot;;	
	
	EventSource.Builder builder = new EventSource.Builder(eH, URI.create(sipTokenUrl));

	EventSource eventSource = builder.build();
//	eventSource.setReconnectionTimeMs(Integer.parseInt(args[1]));
	eventSource.start();
	String participantsUrl = sipUrl + &quot;participants/${ParticipantUuid}/calls&quot;;

	def post = new URL(participantsUrl).openConnection();
	File inputFile = new File(&quot;${dataDir}/Participant-HR-WebRtc.json&quot;)
	post.setRequestMethod(&quot;POST&quot;)
	post.setDoOutput(true)
	post.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
	post.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)
	post.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
	post.getOutputStream().write(inputFile.text.getBytes(&quot;UTF-8&quot;));
	def postRC = post.getResponseCode();
	
	if(postRC.equals(200)) {
	    def jsonString = post.getInputStream().getText()
	    def slurper = new JsonSlurper();
	    def callUuid  = slurper.parseText(jsonString).result.call_uuid;
		logWriter.write(&quot;HR=Calls=&quot;+callUuid + newLine)
	     vars.put(&quot;CallUuid&quot;,callUuid);

	     def ack = new URL(participantsUrl+&quot;/&quot;+callUuid+&quot;/ack&quot;).openConnection();
		ack.setRequestMethod(&quot;POST&quot;)	
		ack.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
		ack.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
		def ackResponse = ack.getResponseCode();
		logWriter.write(&quot;HR=Ack=&quot;+ackResponse + newLine);
	}
	else {
		logWriter.write(&quot;HR=Failed to POST Calls&quot; + newLine)
	} 

	int startTime = 1
	int refreshInterval = 40
	int hcInterval = 5
	int hcTime = hcInterval
	int refreshTime = refreshInterval
	int elapsedTime = 1000
	int seqId = 1
	
	while(startTime &lt; Integer.parseInt(args[2]))
	{
		if(startTime &gt; hcTime) {
			
			hcTime += hcInterval;
			
			String hcUrl = &quot;https://${BASE_URL_4}/virtual-court/api/v1/hearing/${ConferenceId}/heartbeat&quot;;
			def hcReq = new URL(hcUrl).openConnection();		
			String hcJson = new File(&quot;${dataDir}/healthcheck.json&quot;).text;	
			hcJson = hcJson.replace(&quot;[UUID]&quot;,UUID.randomUUID().toString());
      		hcJson = hcJson.replace(&quot;[TimeStamp]&quot;,new Timestamp(System.currentTimeMillis()).toInstant().toString());
			hcJson = hcJson.replace(&quot;[ConferenceId]&quot;,&quot;${ConferenceId}&quot;);
			hcJson = hcJson.replace(&quot;[ParticipantId]&quot;,&quot;${participantId}&quot;);
			hcJson = hcJson.replace(&quot;\&quot;[ElapsedTime]\&quot;&quot;,elapsedTime.toString());
			hcJson = hcJson.replace(&quot;\&quot;[SequenceId]\&quot;&quot;,seqId.toString());
			elapsedTime += hcInterval * 1000;
			seqId += 1;
			logWriter.write(&quot;HR=&quot;+hcJson);
			hcReq.setRequestMethod(&quot;POST&quot;)
			hcReq.setDoOutput(true)
			hcReq.setRequestProperty(&quot;Authorization&quot;, &quot;Bearer ${JwtToken}&quot;)
			hcReq.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json; charset=UTF-8&quot;)
			hcReq.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			hcReq.getOutputStream().write(hcJson.getBytes(&quot;UTF-8&quot;));
			def hcRC = hcReq.getResponseCode();
			logWriter.write(&quot;HR=healthcheck=&quot;+hcRC + newLine);

			def videoApiToken = new URL(&quot;https://${loginBaseUrl}${loginUrl}&quot;).openConnection();
			String params = &quot;grant_type=client_credentials&amp;client_id=${videoApiClientId}&quot;;
			params += &quot;&amp;client_secret=&quot;+URLEncoder.encode(vars.get(&quot;videoApiClientSecret&quot;), &quot;UTF-8&quot;);
			params += &quot;&amp;resource=https%3A%2F%2F${videoApiUrl}&quot;;
			videoApiToken.setRequestMethod(&quot;POST&quot;)
			videoApiToken.setDoOutput(true)
			videoApiToken.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)
			videoApiToken.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			videoApiToken.getOutputStream().write(params.getBytes(&quot;UTF-8&quot;));
			def vaTokenRC = videoApiToken.getResponseCode();
			logWriter.write(&quot;HR=VidepApiTokenRC=&quot;+vaTokenRC + newLine);
			if(vaTokenRC.equals(200)) {
				def jsonString = videoApiToken.getInputStream().getText()
			    def slurper = new JsonSlurper();
			    def accessToken  = &quot;Bearer &quot;+ slurper.parseText(jsonString).access_token;
	
				def hbUrl =&quot;https://${videoApiUrl}/conferences/${ConferenceId}/participant/${participantId}/heartbeat&quot;;
			     def postHB = new URL(hbUrl).openConnection();
			     logWriter.write(&quot;HR=hbUrl=&quot;+hbUrl + newLine);
			     File heartBeat = new File(&quot;${dataDir}/heartBeat.json&quot;)
				postHB.setRequestMethod(&quot;POST&quot;)
				postHB.setDoOutput(true)	
				postHB.setRequestProperty(&quot;Authorization&quot;, accessToken)
				postHB.setRequestProperty(&quot;content-type&quot;, &quot;application/json&quot;)
				postHB.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
				postHB.getOutputStream().write(heartBeat.text.getBytes(&quot;UTF-8&quot;));
				def hbRC = postHB.getResponseCode();
				logWriter.write(&quot;HR=hbRC=&quot;+hbRC + newLine);
			}
			else {
				logWriter.write(&quot;HR=Failed to POST heart beat&quot; + newLine)
			} 
		}
	
		
		if(startTime &gt; refreshTime)
		{			
			def refresh = new URL(sipUrl+&quot;/refresh_token&quot;).openConnection();
			refresh.setRequestMethod(&quot;POST&quot;)
			refresh.setDoOutput(true)
			refresh.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
			refresh.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			def refreshRC = refresh.getResponseCode();
			logWriter.write(&quot;HR=RefreshRC=&quot;+refreshRC + newLine);
			if(refreshRC.equals(200)) {
				println(&quot;PreviousToken=&quot;+vars.get(&quot;SelfTestToken&quot;));
				 def jsonString = refresh.getInputStream().getText()
			      def slurper = new JsonSlurper();
				 def sipToken  = slurper.parseText(jsonString).result.token;
					logWriter.write(&quot;HR=RefreshedToken=&quot;+sipToken + newLine)
				    vars.put(&quot;SelfTestToken&quot;,sipToken);
			}
			refreshTime += refreshInterval;
		}
		
		TimeUnit.SECONDS.sleep(1);
		startTime += 1;
	}
	
	
//	TimeUnit.SECONDS.sleep(Integer.parseInt(args[2]));
	eventSource.close();
	logWriter.close();

//	for(String respRecord:eH.respList){
//		System.out.println(&quot;HR=&quot;+respRecord);
//		JsonReader jsonReader = Json.createReader(new StringReader(respRecord));
//		JsonObject jsonObject = jsonReader.readObject();
//		jsonReader.close(); 
//		String token = jsonObject.getString(&quot;participant_uuid&quot;);
//		if(token != null &amp;&amp; !token.trim().isEmpty()) {
//			responseList = token; 
//		}
//		responseList = responseList + respRecord; 	
//	}
//
//	SampleResult.setResponseData(responseList,&quot;866&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s26-Disconnect" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/participants/${ParticipantUuid}/calls/${CallUuid}/disconnect</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Participant-s27-ReleaseToken" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;reason&quot;:&quot;Call transferred&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/release_token?token=${SelfTestToken}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\JMeter Scripts\JmeterPerfTest\results\Participants_V1.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
