<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="VH-JUDGE-HEARING-JOURNEY" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.17. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Login Config" enabled="true">
        <stringProp name="filename">${dataDir}/BP06_JudgeAttendHearing_1.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">LoginId</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_4" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_4</stringProp>
            <stringProp name="Argument.value">login.microsoftonline.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_5" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_5</stringProp>
            <stringProp name="Argument.value">az416426.vo.msecnd.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_6" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_6</stringProp>
            <stringProp name="Argument.value">aadcdn.msauth.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_7" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_7</stringProp>
            <stringProp name="Argument.value">login.live.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserLoginId" elementType="Argument">
            <stringProp name="Argument.name">UserLoginId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPassword" elementType="Argument">
            <stringProp name="Argument.name">UserPassword</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConferenceId" elementType="Argument">
            <stringProp name="Argument.name">ConferenceId</stringProp>
            <stringProp name="Argument.value">4c91ba86-8ad3-4dbb-a7ac-06ea828f00b7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connectionTime" elementType="Argument">
            <stringProp name="Argument.name">connectionTime</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sleepTime" elementType="Argument">
            <stringProp name="Argument.name">sleepTime</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hearingTime" elementType="Argument">
            <stringProp name="Argument.name">hearingTime</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientConferencesUrl" elementType="Argument">
            <stringProp name="Argument.name">clientConferencesUrl</stringProp>
            <stringProp name="Argument.value">api/client/v2/conferences</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="httpPrefix" elementType="Argument">
            <stringProp name="Argument.name">httpPrefix</stringProp>
            <stringProp name="Argument.value">https://</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sessionId" elementType="Argument">
            <stringProp name="Argument.name">sessionId</stringProp>
            <stringProp name="Argument.value">TestSessionId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hearbeatUID" elementType="Argument">
            <stringProp name="Argument.name">hearbeatUID</stringProp>
            <stringProp name="Argument.value">TestHbUID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tokenDir" elementType="Argument">
            <stringProp name="Argument.name">tokenDir</stringProp>
            <stringProp name="Argument.value">C:/JMeter Scripts/JmeterPerfTest/tokens</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loginUrl" elementType="Argument">
            <stringProp name="Argument.name">loginUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoApiClientId" elementType="Argument">
            <stringProp name="Argument.name">videoApiClientId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoApiClientSecret" elementType="Argument">
            <stringProp name="Argument.name">videoApiClientSecret</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoApiUrl" elementType="Argument">
            <stringProp name="Argument.name">videoApiUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoWebClientId" elementType="Argument">
            <stringProp name="Argument.name">videoWebClientId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="videoWebClientSecret" elementType="Argument">
            <stringProp name="Argument.name">videoWebClientSecret</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataDir" elementType="Argument">
            <stringProp name="Argument.name">dataDir</stringProp>
            <stringProp name="Argument.value">C:/JMeter Scripts/JmeterPerfTest/data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logDir" elementType="Argument">
            <stringProp name="Argument.name">logDir</stringProp>
            <stringProp name="Argument.value">C:/JMeter Scripts/JmeterPerfTest/logs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logoutUrl" elementType="Argument">
            <stringProp name="Argument.name">logoutUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">25</stringProp>
        <stringProp name="ThreadGroup.ramp_time">750</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s01-AuthToken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${videoWebClientId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${videoWebClientSecret}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
                <elementProp name="resource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${videoWebClientId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">resource</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${LoginId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${UserPassword}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.port">${PortNo}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${loginUrl}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://login.microsoftonline.com</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.access_token</stringProp>
              <stringProp name="EXPECTED_VALUE">^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s02-Conferences" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/judges</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|EYFji.ACAa7</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ConferenceId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[?(@.status!=&apos;Closed&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s03-Conferences" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|EYFji.ACAa7</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participant_uri</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestParticipantUri</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JudgeDisplayName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.role==&apos;Judge&apos;)].tiled_display_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestJudgeDisplayName</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JudgeId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.role==&apos;Judge&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestJudgeId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">UserName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.role==&apos;Judge&apos;)].username</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestUserName</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JudgeName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.participants[?(@.role==&apos;Judge&apos;)].display_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestJudgeName</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s04-Jwtoken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">participants/${JudgeId}/jwtoken</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|EYFji.tURL0</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s05-Instantmessages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}/instantmessages/participant/${UserLoginId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|EYFji.E/Aft</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s06-Request_token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;display_name&quot;:&quot;${JudgeDisplayName}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/request_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="pin" elementType="Header">
                  <stringProp name="Header.name">pin</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.participant_uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s07-Conference_status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/conference_status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Judge-s08-Heatbeat SessionId" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">	   var length = 16;
 	   var randomString = &apos;&apos;;
        var uidLookup = &apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;
        if (length &gt;= 16) {
            randomString = Date.now().toString(36);
        }
        for (var i = randomString.length; i &lt; length; i++) {
            randomString += uidLookup[Math.floor(Math.random() * uidLookup.length)];
        }
         vars.put(&quot;sessionId&quot;, randomString);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Judge-s09-WR Event" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">${BASE_URL_2} ${connectionTime} ${sleepTime} ${itnum} </stringProp>
            <stringProp name="script">import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import java.net.URI;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonValue; 
import java.io.FileWriter;  
import java.io.IOException; 
import org.apache.jmeter.services.FileServer;
import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;
import java.sql.Timestamp;
import java.time.Instant;

public class SimpleEventHandler implements EventHandler {

	public List&lt;String&gt; respList = new ArrayList&lt;String&gt;();
	File logFile = new File(&quot;${logDir}/${JudgeName}/${UserName}/${JudgeId}-log.txt&quot;);
	String newLine = &quot;\r\n&quot;;

	public void onOpen() throws Exception{
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;WR=The connection has been opened&quot; + newLine);
		myWriter.close();
	}

	public void onClosed() throws Exception{
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;WR=The connection has been closed&quot; + newLine);
		myWriter.close();
	}

	public void onMessage(String Event, MessageEvent messageEvent) throws Exception{

		JsonReader jsonReader = Json.createReader(new StringReader(messageEvent.getData()));
		JsonObject jsonObject = jsonReader.readObject();
		jsonReader.close(); 
		if(jsonObject.toString().contains(&quot;token&quot;)) {
			String token = jsonObject.getString(&quot;token&quot;);
			if(token != null &amp;&amp; !token.trim().isEmpty()) { 
				String fileName = &quot;${tokenDir}/${JudgeName}/${UserName}&quot;;
				File tokenFile = new File(fileName);
				tokenFile.mkdirs();
				fileName += &quot;/${JudgeId}-token.csv&quot;;
				tokenFile = new File(fileName);
				tokenFile.createNewFile();
				FileWriter myWriter = new FileWriter(tokenFile);
				myWriter.write(messageEvent.getData());
				myWriter.close();
				myWriter = myWriter = new FileWriter(logFile, true);
				myWriter.write(&quot;ReceivedToken=&quot;+token + &quot;\r\n&quot;);
				myWriter.close();
				respList.add(messageEvent.getData());
			}
		}		
	}

	public void onComment(String comment) throws Exception{
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;WR=&quot;+comment + newLine);
		myWriter.close();
	}

	public void onError(Throwable t){
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;WR=Error=&quot;+t + newLine);
		myWriter.close();
	}
}
	String newLine = &quot;\r\n&quot;;
	String fileName = &quot;${logDir}/${JudgeName}/${UserName}&quot;;
	File logFile = new File(fileName);
	logFile.mkdirs();
	fileName += &quot;/${JudgeId}-log.txt&quot;;
	logFile = new File(fileName);
	logFile.createNewFile();
	FileWriter logWriter = new FileWriter(logFile, true);
	
	def retry = true;
	def retryCount = 1;

	while(retry) {

		EventHandler eH = new SimpleEventHandler();
		String baseUrl = &quot;${httpPrefix}&quot;+args[0]+&quot;/${clientConferencesUrl}/${ParticipantUri}/&quot;;
		String sipTokenUrl = baseUrl+&quot;events?token=&apos;&quot;+URLEncoder.encode(vars.get(&quot;SelfTestToken&quot;), &quot;UTF-8&quot;)+&quot;&apos;&quot;;
		
		EventSource.Builder builder = new EventSource.Builder(eH, URI.create(sipTokenUrl));
	
		EventSource eventSource = builder.build();
		logWriter.write(&quot;WR=Started to connect&quot; + newLine);
		eventSource.start();
		String sipUrl = baseUrl + &quot;participants/&quot;+vars.get(&quot;ParticipantUuid&quot;)+&quot;/calls&quot;;
	
	
		def post = new URL(sipUrl).openConnection();
		
		logWriter.write(&quot;WR=CallsUrl=&quot;+sipUrl + newLine);
		File inputFile = new File(&quot;${dataDir}/Judge-WR-WebRtc.json&quot;)
		post.setRequestMethod(&quot;POST&quot;)
		post.setDoOutput(true)
		post.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
		post.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)
		post.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
		post.getOutputStream().write(inputFile.text.getBytes(&quot;UTF-8&quot;));
		def postRC = post.getResponseCode();
		
		if(postRC.equals(200)) {
			def jsonString = post.getInputStream().getText()
		    def slurper = new JsonSlurper();
		    def callUuid  = slurper.parseText(jsonString).result.call_uuid;
			logWriter.write(&quot;WR=Calls=&quot;+callUuid + newLine);
		     vars.put(&quot;CallUuid&quot;,callUuid);
			sipUrl += &quot;/&quot;+callUuid;
		     def ack = new URL(sipUrl+&quot;/ack&quot;).openConnection();		     
			logWriter.write(&quot;AckUrl=&quot;+sipUrl+&quot;/ack&quot; + newLine);
			ack.setRequestMethod(&quot;POST&quot;)	
			ack.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
			ack.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			def ackResponse = ack.getResponseCode();
			logWriter.write(&quot;WR=Ack=&quot;+ackResponse + newLine);
		}
		else {
			logWriter.write(&quot;WR=Failed to get CallUuid&quot; + newLine);
		} 
		
		TimeUnit.SECONDS.sleep(5);
	
		
	
		if(retryCount &gt;= 2) {
			retry = false;
		}
		 retryCount += 1;

		if(retry){
		 
			String startUrl = &quot;https://${BASE_URL_1}/conferences/${ConferenceId}/start&quot;;
			def startConf = new URL(startUrl).openConnection();
			String startBody = &quot;&quot;&quot;{&quot;layout&quot;:&quot;Dynamic&quot;}&quot;&quot;&quot;;			
			startConf.setRequestMethod(&quot;POST&quot;)		
			startConf.setDoOutput(true)
			startConf.setRequestProperty(&quot;Connection&quot;, &quot;keep-alive&quot;)
			startConf.setRequestProperty(&quot;Authorization&quot;, &quot;Bearer ${BearerToken}&quot;)
			startConf.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json-patch+json&quot;)
			startConf.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;)
			startConf.setRequestProperty(&quot;Request-Id&quot;, &quot;|2a349f115b5441cbb4ba35f791c143e2.8dac9d35661045a0&quot;)
			startConf.setRequestProperty(&quot;Request-Context&quot;, &quot;appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256&quot;)
			startConf.getOutputStream().write(startBody.getBytes(&quot;UTF-8&quot;));
			def startRC = startConf.getResponseCode();
			logWriter.write(startUrl+&quot;=WR=StartRC=&quot;+startRC + newLine);

			String conferencesUrl = &quot;https://${BASE_URL_1}/conferences/${ConferenceId}/participants&quot;;
			def confReq = new URL(conferencesUrl).openConnection();			
			confReq.setRequestProperty(&quot;Authorization&quot;, &quot;Bearer ${BearerToken}&quot;)
			confReq.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)
			def confRC = confReq.getResponseCode();
			logWriter.write(&quot;WR=confRC=&quot;+confRC + newLine);

			String participantsUrl = &quot;https://${BASE_URL_1}/${ConferenceId}/participants&quot;;
			def partcipantsReq = new URL(participantsUrl).openConnection();			
			partcipantsReq.setRequestProperty(&quot;Authorization&quot;, &quot;Bearer ${BearerToken}&quot;)
			partcipantsReq.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)
			def partcipantsRC = partcipantsReq.getResponseCode();
			logWriter.write(&quot;WR=partcipantsRC=&quot;+partcipantsRC + newLine);

			String disconnectUrl = sipUrl+&quot;/disconnect&quot;;
			String discBody = &quot;&quot;&quot;{}&quot;&quot;&quot;;
			logWriter.write(&quot;disURL=&quot;+disconnectUrl + newLine);
			def disCon = new URL(disconnectUrl).openConnection();
			disCon.setRequestMethod(&quot;POST&quot;)
			disCon.setDoOutput(true)
			disCon.setRequestProperty(&quot;Connection&quot;, &quot;keep-alive&quot;)
			disCon.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
			disCon.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)
			disCon.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			disCon.getOutputStream().write(discBody.getBytes(&quot;UTF-8&quot;));
			def disRC = disCon.getResponseCode();
			logWriter.write(&quot;WR=disRC=&quot;+disRC + newLine);

			String releaseUrl = baseUrl + &quot;release_token?token=&quot; + vars.get(&quot;SelfTestToken&quot;);
			String releaseBody = &quot;&quot;&quot;{&quot;reason&quot;:&quot;Call transferred&quot;}&quot;&quot;&quot;;
			def relCon = new URL(releaseUrl).openConnection();
			relCon.setRequestMethod(&quot;POST&quot;)
			relCon.setDoOutput(true)
			relCon.setRequestProperty(&quot;Content-Type&quot;, &quot;text/plain;charset=UTF-8&quot;)
			relCon.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			relCon.getOutputStream().write(releaseBody.getBytes(&quot;UTF-8&quot;));
			def relRC = relCon.getResponseCode();
			logWriter.write(&quot;WR=relRC=&quot;+relRC + newLine);
			
//			TimeUnit.SECONDS.sleep(Integer.parseInt(args[2]));
		}
		int waitTime = 0;

		while(waitTime &lt; Integer.parseInt(args[2]))
		{
			for(String respRecord:eH.respList){
				logWriter.write(&quot;WR=TokenObtained=&quot;+ respRecord + newLine);
				retry = false;
				waitTime = Integer.parseInt(args[2]);
			}
			TimeUnit.SECONDS.sleep(1);
			waitTime +=1;
		}

		if(retry){
			String reqTokUrl = baseUrl + &quot;request_token&quot;;
			String reqTokBody = &quot;&quot;&quot;{&quot;display_name&quot;:&quot;${JudgeDisplayName}&quot;}&quot;&quot;&quot;;			
			logWriter.write(&quot;WR=reqTokUrl=&quot;+reqTokUrl + newLine);
			def reqTok = new URL(reqTokUrl).openConnection();
			reqTok.setRequestMethod(&quot;POST&quot;)
			reqTok.setDoOutput(true)
			reqTok.setRequestProperty(&quot;pin&quot;, &quot;none&quot;)
			reqTok.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)
			reqTok.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			reqTok.getOutputStream().write(reqTokBody.getBytes(&quot;UTF-8&quot;));
			def reqTokRC = reqTok.getResponseCode();
			logWriter.write(&quot;WR=reqTokRC=&quot;+reqTokRC + newLine);
			
			if(reqTokRC.equals(200)) {
				def jsonString = reqTok.getInputStream().getText()
				def slurper = new JsonSlurper();
				def participantUuid  = slurper.parseText(jsonString).result.participant_uuid;
				logWriter.write(&quot;WR=participantUuid=&quot;+participantUuid + newLine);
				vars.put(&quot;ParticipantUuid&quot;,participantUuid);
				
				def selfTestToken  = slurper.parseText(jsonString).result.token;
				logWriter.write(&quot;WR=selfTestToken=&quot;+selfTestToken + newLine);
				vars.put(&quot;SelfTestToken&quot;,selfTestToken);			     
			}
		}
		eventSource.close();
	}
	
//	logWriter.flush();
	logWriter.close();

//	int startTime = 1
//	int refreshInterval = 40
//	int hcInterval = 5
//	int hcTime = hcInterval
//	int refreshTime = refreshInterval
//	long elapsedTime = 0
//	int seqId = 0
//	long startTimeMillis = System.currentTimeMillis();
//	
//	while(startTime &lt; 20)
//	{
//
//		def videoApiToken = new URL(&quot;https://login.microsoftonline.com/fb6e0e22-0da3-4c35-972a-9d61eb256508/oauth2/token&quot;).openConnection();
//		def params = &quot;grant_type=client_credentials&amp;client_id=42e93612-20f7-4e9f-b3d4-a9aa06819bce&amp;client_secret=VaTfrfs.%7EN32U4Dy_DJrsHI5-9_s2_6-l0&amp;resource=https%3A%2F%2Fvh-video-api-dev.azurewebsites.net&quot;;
//		videoApiToken.setRequestMethod(&quot;POST&quot;)
//		videoApiToken.setDoOutput(true)
//		videoApiToken.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)
//		videoApiToken.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
//		videoApiToken.getOutputStream().write(params.getBytes(&quot;UTF-8&quot;));
//		def vaTokenRC = videoApiToken.getResponseCode();
//		println(&quot;VidepApiTokenRC=&quot;+vaTokenRC);
//		if(vaTokenRC.equals(200)) {
//			def jsonString = videoApiToken.getInputStream().getText()
//		    def slurper = new JsonSlurper();
//		    def accessToken  = &quot;Bearer &quot;+ slurper.parseText(jsonString).access_token;
//			println(&quot;AccessToken=&quot;+accessToken)
//
//			def hbUrl =&quot;https://vh-video-api-dev.azurewebsites.net//conferences/${ConferenceId}/participant/${JudgeId}/heartbeat&quot;
//		     def postHB = new URL(hbUrl).openConnection();
//		     File heartBeat = new File(&quot;c:/tmp/heartBeat.json&quot;)
//			postHB.setRequestMethod(&quot;POST&quot;)
//		postHB.setDoOutput(true)	
//			postHB.setRequestProperty(&quot;Authorization&quot;, accessToken)
//			postHB.setRequestProperty(&quot;content-type&quot;, &quot;application/json&quot;)
//			postHB.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
//			postHB.getOutputStream().write(heartBeat.text.getBytes(&quot;UTF-8&quot;));
//			def hbRC = postHB.getResponseCode();
//			println(&quot;hbRC=&quot;+hbRC);
//		}
//		else {
//			println(&quot;Failed to POST heart beat&quot;)
//		} 
//
//		TimeUnit.SECONDS.sleep(1);
//		startTime += 1;
//	}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s10-Read Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">file</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${tokenDir}/${JudgeName}/${UserName}/${JudgeId}-token.csv</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;eventToken&quot;, prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.alias</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s11-Request Token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;display_name&quot;:&quot;${JudgeDisplayName}&quot;,&quot;token&quot;:&quot;${SelfTestToken}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/request_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="pin" elementType="Header">
                  <stringProp name="Header.name">pin</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SelfTestToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUri</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.conference_name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname=" Access Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ParticipantUuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.participant_uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TestToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s12-Conference_Status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/conference_status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Judge-s13-HR Event" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">${BASE_URL_2} ${connectionTime} ${hearingTime}</stringProp>
            <stringProp name="script">import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import java.net.URI;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonValue;
import org.apache.jmeter.services.FileServer;
import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;
import java.sql.Timestamp;
import java.time.Instant;

public class SimpleEventHandler implements EventHandler {

	public List&lt;String&gt; respList = new ArrayList&lt;String&gt;();
	File logFile = new File(&quot;${logDir}/${JudgeName}/${UserName}/${JudgeId}-log.txt&quot;);
	String newLine = &quot;\r\n&quot;;

	public void onOpen() throws Exception{
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;HR=The connection has been opened&quot; + newLine);
		myWriter.close();
	}

	public void onClosed() throws Exception{
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;HR=The connection has been closed&quot; + newLine);
		myWriter.close();
	}

	public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;HR=&quot;+messageEvent.getData() + &quot;\r\n&quot;);
		myWriter.close();
		respList.add(messageEvent.getData());
	}

	public void onComment(String comment) throws Exception{
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;HR=&quot;+comment + newLine);
		myWriter.close();
	}

	public void onError(Throwable t){
		FileWriter myWriter = new FileWriter(logFile, true);
		myWriter.write(&quot;HR=Error=&quot;+t + newLine);
		myWriter.close();
	}
}
	String newLine = &quot;\r\n&quot;;
	String fileName =  &quot;${logDir}/${JudgeName}/${UserName}/${JudgeId}-log.txt&quot;;
	FileWriter logWriter = new FileWriter(new File(fileName), true);

	EventHandler eH = new SimpleEventHandler();
	String responseList=&quot;Test Empty&quot;;
	String sipUrl = &quot;${httpPrefix}&quot;+args[0]+&quot;/${clientConferencesUrl}/${ParticipantUri}/&quot;;	
	String sipTokenUrl = sipUrl+&quot;events?token=&apos;&quot;+URLEncoder.encode(vars.get(&quot;SelfTestToken&quot;), &quot;UTF-8&quot;)+&quot;&apos;&quot;;
	logWriter.write(&quot;HR=&quot;+sipTokenUrl+ newLine);
	
	EventSource.Builder builder = new EventSource.Builder(eH, URI.create(sipTokenUrl));
	EventSource eventSource = builder.build();
	eventSource.start();
	String participantsUrl = sipUrl + &quot;participants/${ParticipantUuid}/calls&quot;;

	def post = new URL(participantsUrl).openConnection();
	File inputFile = new File(&quot;${dataDir}/Judge-HR-WebRtc.json&quot;)
	post.setRequestMethod(&quot;POST&quot;)
	post.setDoOutput(true)
	post.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
	post.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)
	post.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
	post.getOutputStream().write(inputFile.text.getBytes(&quot;UTF-8&quot;));
	def postRC = post.getResponseCode();
	
	if(postRC.equals(200)) {
	    def jsonString = post.getInputStream().getText()
	    def slurper = new JsonSlurper();
	    def callUuid  = slurper.parseText(jsonString).result.call_uuid;
		logWriter.write(&quot;HR=Calls=&quot;+callUuid+ newLine);
	     vars.put(&quot;CallUuid&quot;,callUuid);

	     def ack = new URL(participantsUrl+&quot;/&quot;+callUuid+&quot;/ack&quot;).openConnection();
		ack.setRequestMethod(&quot;POST&quot;)	
		ack.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
		ack.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
		def ackResponse = ack.getResponseCode();
		logWriter.write(&quot;HR=Ack=&quot;+ackResponse+ newLine);
	}
	else {		
		logWriter.write(&quot;HR=Failed to post Calls&quot;+ newLine);
	} 

	int startTime = 1
	int refreshInterval = 40
	int hcInterval = 5
	int hcTime = hcInterval
	int refreshTime = refreshInterval
	long elapsedTime = 0
	int seqId = 0
	long startTimeMillis = System.currentTimeMillis();
	
	while(startTime &lt; Integer.parseInt(args[2]))
	{
		if(startTime &gt; hcTime) {

			elapsedTime= System.currentTimeMillis() - startTimeMillis;
//			println(&quot;Timer=&quot;+(elapsedTime));
			hcTime += hcInterval;			
			String hcUrl = &quot;https://${BASE_URL_3}/virtual-court/api/v1/hearing/${ConferenceId}/heartbeat&quot;;
			def hcReq = new URL(hcUrl).openConnection();		
			String hcJson = new File(&quot;${dataDir}/healthcheck.json&quot;).text;	
			hcJson = hcJson.replace(&quot;[UUID]&quot;,UUID.randomUUID().toString());
      		hcJson = hcJson.replace(&quot;[TimeStamp]&quot;,new Timestamp(System.currentTimeMillis()).toInstant().toString());
			hcJson = hcJson.replace(&quot;[ConferenceId]&quot;,&quot;${ConferenceId}&quot;);
			hcJson = hcJson.replace(&quot;[ParticipantId]&quot;,&quot;${JudgeId}&quot;);
			hcJson = hcJson.replace(&quot;[SessionId]&quot;,&quot;${sessionId}&quot;);
			hcJson = hcJson.replace(&quot;\&quot;[ElapsedTime]\&quot;&quot;,elapsedTime.toString());
			hcJson = hcJson.replace(&quot;\&quot;[SequenceId]\&quot;&quot;,seqId.toString());
			elapsedTime += hcInterval * 1000;
			seqId += 1;
//			println(hcJson);
			hcReq.setRequestMethod(&quot;POST&quot;)
			hcReq.setDoOutput(true)
			hcReq.setRequestProperty(&quot;Authorization&quot;, &quot;Bearer ${JwtToken}&quot;)
			hcReq.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json; charset=UTF-8&quot;)
			hcReq.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			hcReq.getOutputStream().write(hcJson.getBytes(&quot;UTF-8&quot;));
			def hcRC = hcReq.getResponseCode();
			logWriter.write(&quot;HR=healthcheck=&quot;+hcRC+ newLine);

			String params = &quot;grant_type=client_credentials&amp;client_id=${videoApiClientId}&quot;;
			params += &quot;&amp;client_secret=&quot;+URLEncoder.encode(vars.get(&quot;videoApiClientSecret&quot;), &quot;UTF-8&quot;);
			params += &quot;&amp;resource=https%3A%2F%2F${videoApiUrl}&quot;;
			def videoApiToken = new URL(&quot;https://${BASE_URL_4}${loginUrl}&quot;).openConnection();
		
			videoApiToken.setRequestMethod(&quot;POST&quot;)
			videoApiToken.setDoOutput(true)
			videoApiToken.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)
			videoApiToken.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			videoApiToken.getOutputStream().write(params.getBytes(&quot;UTF-8&quot;));
			def vaTokenRC = videoApiToken.getResponseCode();
			logWriter.write(&quot;HR=VidepApiTokenRC=&quot;+vaTokenRC+ newLine);
			if(vaTokenRC.equals(200)) {
				def jsonString = videoApiToken.getInputStream().getText()
			    def slurper = new JsonSlurper();
			    def accessToken  = &quot;Bearer &quot;+ slurper.parseText(jsonString).access_token;
//				println(&quot;AccessToken=&quot;+accessToken)
	
				def hbUrl =&quot;https://${videoApiUrl}/conferences/${ConferenceId}/participant/${JudgeId}/heartbeat&quot;;
			     def postHB = new URL(hbUrl).openConnection();
			     File heartBeat = new File(&quot;${dataDir}/heartBeat.json&quot;)
				postHB.setRequestMethod(&quot;POST&quot;)
				postHB.setDoOutput(true)	
				postHB.setRequestProperty(&quot;Authorization&quot;, accessToken)
				postHB.setRequestProperty(&quot;content-type&quot;, &quot;application/json&quot;)
				postHB.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
				postHB.getOutputStream().write(heartBeat.text.getBytes(&quot;UTF-8&quot;));
				def hbRC = postHB.getResponseCode();
				logWriter.write(&quot;HR=hbRC=&quot;+hbRC+ newLine);
			}
			else {
				logWriter.write(&quot;HR=Failed to POST heart beat&quot;+ newLine)
			} 
		}
	
		
		if(startTime &gt; refreshTime)
		{
			def refresh = new URL(sipUrl+&quot;/refresh_token&quot;).openConnection();
			refresh.setRequestMethod(&quot;POST&quot;)
			refresh.setDoOutput(true)
			refresh.setRequestProperty(&quot;token&quot;, vars.get(&quot;SelfTestToken&quot;))
			refresh.setRequestProperty(&quot;Accept&quot;, &quot;*/*&quot;)
			def refreshRC = refresh.getResponseCode();
			logWriter.write(&quot;HR=RefreshRC=&quot;+refreshRC+ newLine);
			if(refreshRC.equals(200)) {
				logWriter.write(&quot;HR=PreviousToken=&quot;+vars.get(&quot;SelfTestToken&quot;)+ newLine);
				 def jsonString = refresh.getInputStream().getText()
			      def slurper = new JsonSlurper();
				 def sipToken  = slurper.parseText(jsonString).result.token;
					logWriter.write(&quot;HR=RefreshedToken=&quot;+sipToken+ newLine)
				    vars.put(&quot;SelfTestToken&quot;,sipToken);
			}
			refreshTime += refreshInterval;
		}
		
		TimeUnit.SECONDS.sleep(1);
		startTime += 1;
	}
	
	eventSource.close();
	logWriter.close();</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s14-disconnect" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/participants/${ParticipantUuid}/calls/${CallUuid}/disconnect</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="token" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${SelfTestToken}</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s15-Release_Token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;reason&quot;:&quot;Call transferred&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${clientConferencesUrl}/${ParticipantUri}/release_token?token=${SelfTestToken}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s16-End" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">conferences/${ConferenceId}/end</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="Request-Id" elementType="Header">
                  <stringProp name="Header.name">Request-Id</stringProp>
                  <stringProp name="Header.value">|EYFji.ua9wt</stringProp>
                </elementProp>
                <elementProp name="Request-Context" elementType="Header">
                  <stringProp name="Header.name">Request-Context</stringProp>
                  <stringProp name="Header.value">appId=cid-v1:2fe1e6a0-84bd-4910-9d8b-9d5fa7647256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s17-Logout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s18-Config" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">config</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Judge-s19-MsLogout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="post_logout_redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">post_logout_redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/logout</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${logoutUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">992.0</stringProp>
              <stringProp name="ConstantTimer.delay">496</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 992 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\JMeter Scripts\JmeterPerfTest\results\Judges_V1.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
